#!/usr/bin/env ruby
# coding: utf-8
dhost = ENV['DRB_HOST'] || 'localhost'
require 'drb'
counterObj= DRbObject.new_with_uri  "druby://#{dhost}:9000"
file_name = ARGV[0]
ARGV.shift
@drb_args = ARGV
file_type = file_name.split(/\./).last
##
get_erb_code = -> file { 
  file_arr = file.split(/\n/)
  code=(file_arr.map(&->line{ (line =~ /<%|%>/) ? line.gsub(/%-|-%/, '%').gsub(/(.*)<%=(.*)%>(.*)/, 'stp (\2).to_p').gsub(/(.*)<%(.*)%>(.*)/, '\2') : nil }) - [nil] - [" drb_start "] ).join("\n")
}
##
if file_type == "erb"
  file_str = get_erb_code.call(open(file_name){ |f| f.read })
else
  file_str = open(file_name){ |f| f.read }
end
begin 
  $stdout.print counterObj.eval("@drb_args = #{@drb_args};" + file_str)
rescue => e
  $stderr.print e
  $stderr.print "\n"
  if e.backtrace.first =~ /__drbcli__/
    $stderr.print "ERRO:#{file_name}:#{e.backtrace.first.split(/:([0-9]+):/)[1].to_i - 3}"
  else
    $stderr.print "ERRO:#{e.backtrace.first.split(/9000\) /).last}"
  end
end
if counterObj.eval("$st_outputs.empty?")
else
  $stdout.print counterObj.eval("'\n' + $st_outputs.join('\n')")
end
counterObj.eval("clear_st_outputs")
log_record_l = -> {
 $stdout.print "\n"
 $stderr.print counterObj.eval("$log_record.last").to_s.gsub(/connection closed/, '')
}
log_record_l.call if (2.4 > RUBY_VERSION.to_f and RUBY_VERSION.to_f >= 2.3)
